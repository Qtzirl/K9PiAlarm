import time
import busio
import board
import pygame
import yagmail
import adafruit_sht31d
import alsaaudio
import tkinter as tk
from tkinter import messagebox
from tkinter import *

#Begining of GUI
window = tk.Tk()
window.title("K9 Pi Alarm")

#Temperature Sensor Setup
#For Testing Purposes tempsensor2 is using the same address as tempsensor1. Change to x45 when deploying.
i2c = busio.I2C(board.SCL, board.SDA)
tempsensor1 = adafruit_sht31d.SHT31D(i2c, 0x44)
tempsensor2 = adafruit_sht31d.SHT31D(i2c, 0x44)

#Function Defs
def camerastream():
    if(btn['text']=='View K9 Camera'):
        btn['text']='Close K9 Camera'
        btn.state=0
    else:
        btn['text']='View K9 Camera'
        btn.state=1
#audio setup
audio=alsaaudio.Mixer()
#Set Volume to 100% for launch
audio.setvolume(100)

def mutesystem():
    if(mutebtn['text']=='Mute System / Alert'):
        mutebtn['text']='Unmute System / Alert'
        mutebtn['background']='red'
        mutebtn['activebackground']='red'
        audio.setvolume(0)
        mutebtn.state=0
    else:
        mutebtn['text']='Mute System / Alert'
        mutebtn['background']='green'
        mutebtn['activebackground']='green'
        audio.setvolume(100)
        mutebtn.state=1

def exitk9alarm():
    exitalarm=tk.messagebox.askokcancel(title='Exit K9 Pi Alarm?', message="Are you sure you want to exit K9 Pi Alarm?\n\n" "Temerpature Monitoring will be disabled!\n")
    if exitalarm==True:
        messagebox.showwarning('Exiting', "Shutting Down K9 Pi Alarm!\n\n" "Remove K9!")
        window.destroy()
    elif exitalarm==False:
        pass
    else:
        messagebox.showerror('Error', 'We dun Fucked Up')

def savealarmvalues():
    file=open('/home/pi/Desktop/K9PiAlarm/alarmvalues.txt','r+')
    content=file.readlines()
    alarmthreshold = Toplevel(window)
    alarmthreshold.title("Set Alarm Threshold")
    alarmthreshold.geometry("300x200")
    enterhighalertvalue=Label(master=alarmthreshold, text="Enter Heat Alert Alarm Value:")
    enterhighalertvalue.grid(row=2, column=0)
    highalertalarmvalue=Entry(master=alarmthreshold)
    highalertalarmvalue.insert(0, content[0])
    enterhighwarningvalue=Label(master=alarmthreshold, text="Enter Heat Warning Alarm Value:")
    enterhighwarningvalue.grid(row=0, column=0)
    highwarningalarmvalue=Entry(master=alarmthreshold)
    highwarningalarmvalue.insert(0, content[1])
    enterlowalertvalue=Label(master=alarmthreshold, text="Enter Cold Alert Alarm Value:")
    enterlowalertvalue.grid(row=6, column=0)
    lowalertalarmvalue=Entry(master=alarmthreshold)
    lowalertalarmvalue.insert(0, content[3])
    enterlowwarningvalue=Label(master=alarmthreshold, text="Enter Cold Warning Alarm Value:")
    enterlowwarningvalue.grid(row=4, column=0)
    lowwarningalarmvalue=Entry(master=alarmthreshold)
    lowwarningalarmvalue.insert(0, content[2])
    highalertalarmvalue.grid(row=2, column=1)
    highwarningalarmvalue.grid(row=0, column=1)
    lowalertalarmvalue.grid(row=6, column=1)
    lowwarningalarmvalue.grid(row=4, column=1)
    exitalarmvalue=Button(master=alarmthreshold, text="Exit", command=alarmthreshold.destroy)
    exitalarmvalue.grid(row=7, column=1)
    submitnewalarmvalues=Button(master=alarmthreshold, text="Save Alarm Values", command=lambda:[file.seek(0), file.write(highalertalarmvalue.get()+'\n'), file.write(highwarningalarmvalue.get()+'\n'), file.write(lowwarningalarmvalue.get()+'\n'), file.write(lowalertalarmvalue.get()+'\n'), file.close()])
    submitnewalarmvalues.grid(row=7, column=0)

#Email ALert Setup
yag=yagmail.SMTP('k9pialarm@gmail.com')
def emailalert():
    file=open('/home/pi/Desktop/K9PiAlarm/emailtimestamp.txt', 'r+')
    file.seek(0)
    lastemail = time.time()
    file.write(str(lastemail))
    receiver="jcoan8235@gmail.com","18563837550@tmomail.net"
    body="A temperature sensor is indicating an alert status. Remove K9 / Investigate Immediately!"
    yag.send(
        to=receiver,
        subject="K9 Pi Alarm",
        contents=body
    )
    file.close()
#Menu Bar
menu = Menu(window, background='black', foreground='white')
#File Menu
filemenu = Menu(menu, background='black', foreground='white')
filemenu.add_command(label='K9 Camera', command=camerastream)
filemenu.add_separator()
filemenu.add_command(label='Exit', command=exitk9alarm)
menu.add_cascade(label='File', menu=filemenu)
#Options Menu
optionsMenu=Menu(menu, background='black', foreground='white')
menu.add_cascade(label='Options', menu=optionsMenu)
optionsMenu.add_command(label='Set Alarm Threshold', command=savealarmvalues)
optionsMenu.add_separator()
optionsMenu.add_command(label='Mute / Unmute Alert Audio', command=mutesystem)
window.config(menu=menu)
window.attributes('-fullscreen', True)

#Bottom Button Bar GUI
btn_frame=tk.Frame()
#Camera Toggle Button
btn = Button(master=btn_frame, text="View K9 Camera", command= camerastream, background='black', foreground='white')
btn.pack(fill=BOTH, expand=True, side=LEFT)
#Mute System / Alert Button
mutebtn = Button(master=btn_frame, text="Mute System / Alert", command=mutesystem, background='green', foreground='black')
mutebtn.pack(fill=tk.BOTH, expand=True, side=RIGHT)
#End Bottom Button Bar GUI
btn_frame.pack(fill=tk.X, side=BOTTOM)

#Initiate Pygame Mixer
pygame.mixer.init()

#Temperature Display
class App():
    def __init__(self):
        self.root = tk.Frame()
        self.temp1_frame=tk.Frame(relief=RIDGE, borderwidth=5, background='black')
        self.templabel1 = tk.Label(text="", master=self.temp1_frame, background='black', foreground='white')
        self.templabel1.config(font=("Courier", 24))
        self.humlabel1 = tk.Label(text="", master=self.temp1_frame, background='black', foreground='white')
        self.humlabel1.config(font=("Courier", 24))
        self.templabel1.pack(pady=100)
        self.humlabel1.pack()
        self.temp1_frame.pack(fill=BOTH, expand=True, side=LEFT)
        
        #Temperature Sensor 2 Frame
        self.temp2_frame=tk.Frame(relief=RIDGE, borderwidth=5, background='black')
        self.templabel2 = tk.Label(text="", master=self.temp2_frame,background='black', foreground='white')
        self.templabel2.config(font=("Courier", 24))
        self.humlabel2 = tk.Label(text="", master=self.temp2_frame, background='black', foreground='white')
        self.humlabel2.config(font=("Courier", 24))
        self.templabel2.pack(pady=100)
        self.humlabel2.pack()
        self.temp2_frame.pack(fill=BOTH, expand=True, side=RIGHT)
        #Update Temp Loop
        self.update_temp1()
        self.update_hum1()
        self.update_temp2()
        self.update_hum2()
#Temperature Sensor 1 Update and Alarm
    def update_temp1(self):
        file=open("/home/pi/Desktop/K9PiAlarm/alarmvalues.txt", "r")
        content=file.readlines()
        timecheck=open("/home/pi/Desktop/K9PiAlarm/emailtimestamp.txt", "r")
        lastemailsent=timecheck.read()
        temp1 = 'Temp Sensor 1:\n{:0.2f}\N{DEGREE SIGN}'.format(tempsensor1.temperature * 1.8 + 32)
        if tempsensor1.temperature * 1.8 + 32 > float(content[0]):
            self.templabel1.configure(text=temp1, fg='red')
        elif tempsensor1.temperature * 1.8 + 32 > float(content[1]):
            self.templabel1.configure(text=temp1, fg='yellow');
            if time.time()-float(lastemailsent)>600:
                emailalert()
            else:
                pass
            #pygame.mixer.music.load("home/pi/downloads/warning.mp3");
            #pygame.mixer.music.play()
        elif tempsensor1.temperature * 1.8 + 32 < float(content[2]):
            self.templabel1.configure(text=temp1, fg='yellow')
        elif tempsensor1.temperature * 1.8 + 32 < float(content[3]):
            self.templabel1.configure(text=temp1, fg='red')
        else:
            self.templabel1.configure(text=temp1, fg='white')
        self.root.after(5000, self.update_temp1)
    def update_hum1(self):
        hum1 = 'Humidity: \n{:0.2F}%'.format(tempsensor1.relative_humidity)
        if tempsensor1.relative_humidity > 70:
            self.humlabel1.configure(text=hum1, fg='red')
        elif tempsensor1.relative_humidity >65:
            self.humlabel1.configure(text=hum1, fg='yellow')
        else:
            self.humlabel1.configure(text=hum1, fg='white')
        self.root.after(5000, self.update_hum1)
    #Temperature Sensor 2 Update and Alarm
    def update_temp2(self):
        file=open("/home/pi/Desktop/K9PiAlarm/alarmvalues.txt", "r")
        content=file.readlines()
        file.close()
        timecheck=open("/home/pi/Desktop/K9PiAlarm/emailtimestamp.txt", "r")
        lastemailsent=timecheck.read()
        temp2 = 'Temp Sensor 2:\n{:0.2f}\N{DEGREE SIGN}'.format(tempsensor2.temperature * 1.8 + 32)
        if tempsensor2.temperature * 1.8 + 32 > float(content[0]):
            self.templabel2.configure(text=temp2, fg='red')
        elif tempsensor2.temperature * 1.8 + 32 > float(content[1]):
            self.templabel2.configure(text=temp2, fg='yellow')
        elif tempsensor2.temperature * 1.8 + 32 < float(content[2]):
            self.templabel2.configure(text=temp2, fg='yellow')
        elif tempsensor2.temperature * 1.8 + 32 < float(content[3]):
            self.templabel2.configure(text=temp2, fg='red')
        else:
            self.templabel2.configure(text=temp2, fg='white')
        self.root.after(5000, self.update_temp2)
    def update_hum2(self):
        hum2 = 'Humidity: \n{:0.2F}%'.format(tempsensor2.relative_humidity)
        self.humlabel2.configure(text=hum2)
        self.root.after(5000, self.update_hum2)
app=App()

#End GUI
window.mainloop()
